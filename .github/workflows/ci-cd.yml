name: SmartInsight CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  DOTNET_VERSION: '8.0.x'
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  SOLUTION_FILE: 'SmartInsight.sln'

jobs:
  build:
    name: Build Only
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: List workspace contents
        run: |
          pwd
          ls -la
          find . -name "*.sln" -type f
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      
      - name: Restore dependencies
        run: dotnet restore ${{ env.SOLUTION_FILE }}
      
      - name: Build
        run: dotnet build ${{ env.SOLUTION_FILE }} --no-restore --configuration Release
      
      # Test step is temporarily commented out and will be re-enabled later
      # - name: Test
      #   run: dotnet test ${{ env.SOLUTION_FILE }} --no-build --configuration Release --verbosity normal

  # All other jobs are temporarily commented out
  # Will be restored when needed

  # code-analysis:
  #   name: Code Analysis
  #   runs-on: ubuntu-latest
  #   needs: build
  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
  #     
  #     - name: Setup .NET
  #       uses: actions/setup-dotnet@v4
  #       with:
  #         dotnet-version: ${{ env.DOTNET_VERSION }}
  #     
  #     - name: SonarCloud Scan
  #       uses: SonarSource/sonarqube-scan-action@v5.0.0
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
  #         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  #         SONAR_HOST_URL: https://sonarcloud.io
  #       with:
  #         args: >
  #           -Dsonar.projectKey=SmartInsight
  #           -Dsonar.organization=elias-fluent
  #           -Dsonar.sources=src
  #           -Dsonar.tests=tests
  #           -Dsonar.cs.opencover.reportsPaths=./coverage/*/coverage.opencover.xml

  # security-scan:
  #   name: Security Scan
  #   runs-on: ubuntu-latest
  #   needs: build
  #   steps:
  #     - uses: actions/checkout@v4
  #     
  #     - name: Run OWASP Dependency-Check
  #       uses: dependency-check/Dependency-Check_Action@main
  #       with:
  #         project: 'SmartInsight'
  #         path: '.'
  #         format: 'HTML'
  #         out: 'reports'
  #         args: >
  #           --scan .
  #           --suppression ./dependency-check-suppression.xml
  #           --failOnCVSS 7
  #           --enableRetired
  #     
  #     - name: Upload report
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: dependency-check-report
  #         path: reports

  # docker-build:
  #   name: Build Docker Image
  #   runs-on: ubuntu-latest
  #   needs: [code-analysis, security-scan]
  #   if: github.event_name != 'pull_request'
  #   steps:
  #     - uses: actions/checkout@v4
  #     
  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3
  #     
  #     - name: Login to GitHub Container Registry
  #       uses: docker/login-action@v3
  #       with:
  #         registry: ghcr.io
  #         username: ${{ github.repository_owner }}
  #         password: ${{ secrets.GITHUB_TOKEN }}
  #     
  #     - name: Build and push Docker images
  #       uses: docker/build-push-action@v5
  #       with:
  #         context: .
  #         push: true
  #         tags: |
  #           ghcr.io/${{ github.repository_owner }}/smartinsight-api:latest
  #           ghcr.io/${{ github.repository_owner }}/smartinsight-api:${{ github.sha }}
  #         cache-from: type=gha
  #         cache-to: type=gha,mode=max

  # deploy-dev:
  #   name: Deploy to Development
  #   runs-on: ubuntu-latest
  #   needs: docker-build
  #   if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
  #   environment: development
  #   steps:
  #     - uses: actions/checkout@v4
  #     
  #     - name: Setup SSH
  #       uses: webfactory/ssh-agent@v0.9.0
  #       with:
  #         ssh-private-key: ${{ secrets.DEV_SSH_PRIVATE_KEY }}
  #     
  #     - name: Deploy to Development Server
  #       run: |
  #         ssh -o StrictHostKeyChecking=no ${{ secrets.DEV_SERVER_USER }}@${{ secrets.DEV_SERVER_HOST }} << 'EOF'
  #           cd /opt/smartinsight
  #           docker-compose pull
  #           docker-compose down
  #           docker-compose up -d
  #         EOF

  # deploy-prod:
  #   name: Deploy to Production
  #   runs-on: ubuntu-latest
  #   needs: docker-build
  #   if: github.event_name == 'push' && github.ref == 'refs/heads/main'
  #   environment: production
  #   steps:
  #     - name: Wait for manual approval
  #       uses: trstringer/manual-approval@v1
  #       with:
  #         secret: ${{ secrets.GITHUB_TOKEN }}
  #         approvers: ${{ github.repository_owner }}
  #         minimum-approvals: 1
  #         issue-title: 'Deploy to Production'
  #         issue-body: 'Please approve or deny the deployment to production'
  #         exclude-workflow-initiator-as-approver: false
  #     
  #     - uses: actions/checkout@v4
  #     
  #     - name: Setup SSH
  #       uses: webfactory/ssh-agent@v0.9.0
  #       with:
  #         ssh-private-key: ${{ secrets.PROD_SSH_PRIVATE_KEY }}
  #     
  #     - name: Deploy to Production Server
  #       run: |
  #         ssh -o StrictHostKeyChecking=no ${{ secrets.PROD_SERVER_USER }}@${{ secrets.PROD_SERVER_HOST }} << 'EOF'
  #           cd /opt/smartinsight
  #           docker-compose pull
  #           docker-compose down
  #           docker-compose up -d
  #         EOF 