version: '3.8'

services:
  api:
    image: ghcr.io/${GITHUB_REPOSITORY_OWNER:-localhost}/smartinsight-api:${TAG:-latest}
    build:
      context: .
      dockerfile: Dockerfile
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
      qdrant:
        condition: service_healthy
    ports:
      - "5000:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=${ENVIRONMENT:-Production}
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=smartinsight;Username=${DB_USER:-postgres};Password=${DB_PASSWORD:-postgres}
      - Qdrant__Endpoint=http://qdrant:6333
      - Ollama__BaseUrl=${OLLAMA_URL:-http://ollama:11434}
    networks:
      - smartinsight-network
    volumes:
      - api-logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  postgres:
    image: postgres:15
    restart: always
    environment:
      - POSTGRES_USER=${DB_USER:-postgres}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-postgres}
      - POSTGRES_DB=smartinsight
    ports:
      - "5432:5432"
    networks:
      - smartinsight-network
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/db/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./scripts/db/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d smartinsight"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    command: ["postgres", "-c", "row_security=on", "-c", "shared_preload_libraries=pg_stat_statements"]

  qdrant:
    build:
      context: ./scripts/qdrant
      dockerfile: Dockerfile
    image: ${GITHUB_REPOSITORY_OWNER:-localhost}/smartinsight-qdrant:${TAG:-latest}
    restart: always
    environment:
      - QDRANT_HOST=localhost
      - QDRANT_PORT=6333
      - QDRANT_ALLOW_RECOVERY_MODE=true
      - QDRANT_SERVICE__HTTP_PORT=6333
      - QDRANT_SERVICE__ENABLE_TLS=${QDRANT_ENABLE_TLS:-false}
      - QDRANT_LOG_LEVEL=${QDRANT_LOG_LEVEL:-INFO}
    ports:
      - "6333:6333"
    networks:
      - smartinsight-network
    volumes:
      - qdrant-data:/qdrant/storage
      - qdrant-snapshots:/qdrant/snapshots
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  ollama:
    image: ollama/ollama:latest
    restart: always
    ports:
      - "11434:11434"
    networks:
      - smartinsight-network
    volumes:
      - ollama-models:/root/.ollama
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/version"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  seq:
    image: datalust/seq:latest
    restart: always
    environment:
      - ACCEPT_EULA=Y
    ports:
      - "8081:80"
    networks:
      - smartinsight-network
    volumes:
      - seq-data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Backup service for Qdrant data
  qdrant-backup:
    image: alpine:latest
    restart: always
    depends_on:
      qdrant:
        condition: service_healthy
    volumes:
      - qdrant-snapshots:/backups
    environment:
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - BACKUP_INTERVAL_HOURS=${BACKUP_INTERVAL_HOURS:-12}
      - BACKUP_RETENTION_DAYS=${BACKUP_RETENTION_DAYS:-7}
    command: >
      /bin/sh -c "
        apk add --no-cache curl jq findutils;
        mkdir -p /backups;
        while true; do
          echo 'Creating Qdrant snapshot...';
          timestamp=$$(date +%Y%m%d%H%M%S);
          snapshot_name=\"backup-$$timestamp\";
          curl -s -X POST \"http://$$QDRANT_HOST:$$QDRANT_PORT/snapshots\" -H 'Content-Type: application/json' -d '{\"snapshot_name\": \"'\"$$snapshot_name\"'\"}';
          echo 'Snapshot created: '\"$$snapshot_name\";
          
          # Clean up old backups
          find /backups -type f -name 'backup-*' -mtime +$$BACKUP_RETENTION_DAYS -delete;
          
          echo 'Waiting $$BACKUP_INTERVAL_HOURS hours for next backup...';
          sleep $$(( $$BACKUP_INTERVAL_HOURS * 3600 ));
        done
      "

networks:
  smartinsight-network:
    driver: bridge

volumes:
  postgres-data:
  qdrant-data:
  qdrant-snapshots:
  ollama-models:
  seq-data:
  api-logs: 